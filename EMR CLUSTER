resource "aws_emr_cluster" "cluster" {
  name          = var.emr_cluster_name
  release_label = var.release_label
  applications  = var.applications
  termination_protection            = var.termination_protection
  keep_job_flow_alive_when_no_steps = var.keep_job_flow_alive_when_no_steps

  ec2_attributes {
    subnet_id                         = aws_subnet.main.id
    emr_managed_master_security_group = aws_security_group.allow_access.id
    emr_managed_slave_security_group  = aws_security_group.allow_access.id
    instance_profile                  = aws_iam_instance_profile.emr_profile.arn
  }

  master_instance_group {
    instance_type = var.master_instance_type
  }

  core_instance_group {
    instance_type  = var.core_instance_type
    instance_count = var.instance_count

    ebs_config {
      size                 = var.size
      type                 = var.type
      volumes_per_instance = var.volumes_per_instance
    }
    bid_price = var.bid_price
  }
  ebs_root_volume_size = var.ebs_root_volume_size
  tags = var.tags
  service_role = aws_iam_role.iam_emr_service_role.arn
}

resource "aws_emr_managed_scaling_policy" "samplepolicy" {
  cluster_id = aws_emr_cluster.cluster.id
  compute_limits {
    unit_type                       = var.unit_type
    minimum_capacity_units          = var.minimum_capacity_units
    maximum_capacity_units          = var.maximum_capacity_units
    maximum_ondemand_capacity_units = var.maximum_ondemand_capacity_units
    maximum_core_capacity_units     = var.maximum_core_capacity_units
    # tags = var.tags
  }
}

resource "aws_security_group" "allow_access" {
  name        = var.security_group_1
  description = var.description
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [aws_vpc.main.cidr_block]
    description = var.description
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [aws_vpc.main.cidr_block]
    description = var.description
  }

  depends_on = [aws_subnet.main]

  lifecycle {
    ignore_changes = [
      ingress,
      egress,
    ]
  }
  tags = var.tags  
}

resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr_block
  enable_dns_hostnames = var.enable_dns_hostnames
  tags = var.tags
}

resource "aws_subnet" "main" {
  vpc_id     = aws_vpc.main.id
  cidr_block = var.subnet_cidr_block
  tags = var.tags
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id
  tags = var.tags
}

resource "aws_route_table" "r" {
  vpc_id = aws_vpc.main.id
  tags = var.tags
  route {
    cidr_block = var.rt_cidr_block
    gateway_id = aws_internet_gateway.gw.id
  }
}

resource "aws_main_route_table_association" "a" {
  vpc_id         = aws_vpc.main.id
  route_table_id = aws_route_table.r.id
}

# IAM role for EMR Service
resource "aws_iam_role" "iam_emr_service_role" {
  name               = var.service_iam_role_emr
  assume_role_policy = file("${var.service_iam_role_emr_file_name}.json")
  tags = var.tags
}

resource "aws_iam_role_policy" "iam_emr_service_policy" {
  name   = var.service_iam_role_emr_policy
  role   = aws_iam_role.iam_emr_service_role.id
  policy = file("${var.service_iam_role_emr_policy_file_name}.json")
  # tags = var.tags
}

# IAM Role for EC2 Instance Profile
resource "aws_iam_role" "iam_emr_profile_role" {
  name               = var.profile_iam_role_emr
  assume_role_policy = file("${var.profile_iam_role_emr_file_name}.json")
  tags = var.tags
}

resource "aws_iam_instance_profile" "emr_profile" {
  name = var.iam_instance_profile
  role = aws_iam_role.iam_emr_profile_role.name
  tags = var.tags
}

resource "aws_iam_role_policy" "iam_emr_profile_policy" {
  name   = var.profile_iam_role_emr_policy
  role   = aws_iam_role.iam_emr_profile_role.id
  policy = file("${var.profile_iam_role_emr_policy_file_name}.json")
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

variable "aws_region" {
  description = "AWS_Region"
  type        = string
}

variable "aws_profile" {
  description = "AWS_profile"
  type        = string
}

variable "emr_cluster_name" {
  description = "Name of the EMR Cluster"
  type        = string
}

variable "master_instance_type" {
  type        = string
  description = "Master Instance type"
}

variable "core_instance_type" {
  type        = string
  description = "Core Instance type"
}

variable "security_group_1" {
  type        = string
  description = "Name of security group for EMR Cluster"
}

variable "service_iam_role_emr" {
  type        = string
  description = "Name of IAM Service Role for EMR Cluster"
}

variable "service_iam_role_emr_policy" {
  type        = string
  description = "Policy Name of IAM Service Role for EMR Cluster "
}

variable "profile_iam_role_emr" {
  type        = string
  description = "Name of IAM Profile Role for EMR Cluster"
}

variable "profile_iam_role_emr_policy" {
  type        = string
  description = "Name of IAM Profile Role Policy for EMR Cluster"
}

variable "iam_instance_profile" {
  type        = string
  description = "Name of the IAM Instance profile"
}

variable "service_iam_role_emr_file_name" {
  description = "Name of the json file for creating service_iam_role for EMR "
  type        = string
}

variable "service_iam_role_emr_policy_file_name" {
  description = "Name of the json file for creating service_iam_role_policy for EMR"
  type        = string
}

variable "profile_iam_role_emr_file_name" {
  description = "Name of the json file for creating profile_iam_role for EMR"
  type        = string
}

variable "profile_iam_role_emr_policy_file_name" {
  description = "Name of the json file for creating profile_iam_role_policy FOR EMR"
  type        = string
}

variable "release_label" {
  description = "Release label for the Amazon EMR release."
  type        = string
}

variable "applications" {
  description = " Applications installed on this cluster"
  type        = list(string)
}

variable "termination_protection" {
  description = "Switch on/off termination protection. Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value "
  type        = bool
}

variable "keep_job_flow_alive_when_no_steps" {
  description = "Switch on/off run cluster with no steps or when all steps are complete "
  type        = bool
}

variable "size" {
  description = "Volume size, in gibibytes (GiB)"
  type        = number
}

variable "type" {
  description = "Volume type to be used"
  type        = string
}

variable "volumes_per_instance" {
  description = "Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group"
  type        = number
}

variable "bid_price" {
  description = "Bid price for each EC2 Spot instance type as defined by instance_type."
  type        = number
}

variable "ebs_root_volume_size" {
  description = "Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance."
  type        = number
}

variable "unit_type" {
  description = "The unit type used for specifying a managed scaling policy"
  type        = string
}

variable "minimum_capacity_units" {
  description = "The lower boundary of EC2 units. It is measured through VCPU cores or instances"
  type        = number
}

variable "maximum_capacity_units" {
  description = "The upper boundary of EC2 units. It is measured through VCPU cores or instances"
  type        = number
}

variable "maximum_ondemand_capacity_units" {
  description = "The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances"
  type        = number
}

variable "maximum_core_capacity_units" {
  description = "The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances"
  type        = number
}

variable "enable_dns_hostnames" {
  description = "Enable_dns_hostnames determines whether or not DNS hostnames are enabled for instances launched within the VPC"
  type        = bool
}

variable "instance_count" {
  description = "Target number of instances for the instance group. "
  type        = number
}

variable "tags" {
  description = "Map of resource tags to associate with the EMR Cluster resource."
  type        = map(string)
}

variable "description" {
  description = "Description for aws_security_group"
  type        = string
}

variable "vpc_cidr_block" {
  description = "Description for aws_security_group"
  type        = string
}

variable "subnet_cidr_block" {
  description = "Description for aws_security_group"
  type        = string
}

variable "rt_cidr_block" {
  description = "Description for aws_security_group"
  type        = string
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
terraform.tfvars

aws_region                            = "us-east-2"
aws_profile                           = "terraform"
emr_cluster_name                      = "emr-test-arn"
master_instance_type                  = "m4.large"
security_group_1                      = "allow_access"
service_iam_role_emr                  = "iam_emr_service_role_2"
service_iam_role_emr_policy           = "iam_emr_service_policy_2"
profile_iam_role_emr                  = "iam_emr_profile_role_3"
profile_iam_role_emr_policy           = "iam_emr_profile_policy_1"
iam_instance_profile                  = "emr_profile_3"
core_instance_type                    = "c4.large"
service_iam_role_emr_file_name        = "service_iam_role_emr(a)"
service_iam_role_emr_policy_file_name = "service_iam_role_emr_policy(b)"
profile_iam_role_emr_file_name        = "profile_iam_role_emr(c)"
profile_iam_role_emr_policy_file_name = "profile_iam_role_emr_policy(d)"
release_label                         = "emr-6.2.0"
applications                          = ["Spark"]
termination_protection                = false
keep_job_flow_alive_when_no_steps     = true
size                                  = "40"
type                                  = "gp2"
volumes_per_instance                  = "1"
bid_price                             = "0.30"
ebs_root_volume_size                  = "100"
unit_type                             = "Instances"
minimum_capacity_units                = 2
maximum_capacity_units                = 10
maximum_ondemand_capacity_units       = 2
maximum_core_capacity_units           = 10
enable_dns_hostnames                  = true
instance_count                        = 1
tags                  = { "environment" = "emr_test", "Project" = "env" }
description = "Allow inbound traffic"
security_group_2 = "allow_tls"

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

output "cluster_id" {
  description = "The ID of the EMR cluster"
  value       = aws_emr_cluster.cluster.id
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
service_iam_role_emr_policy(b).json

{
    "Version": "2012-10-17",
    "Statement": [{
        "Effect": "Allow",
        "Resource": "*",
        "Action": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:RequestSpotInstances",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ec2:DeleteVolume",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "s3:CreateBucket",
            "s3:Get*",
            "s3:List*",
            "sdb:BatchPutAttributes",
            "sdb:Select",
            "sqs:CreateQueue",
            "sqs:Delete*",
            "sqs:GetQueue*",
            "sqs:PurgeQueue",
            "sqs:ReceiveMessage"
        ]
    }]
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

service_iam_role_emr(a).json


{
    "Version": "2008-10-17",
    "Statement": [
      {
        "Sid": "",
        "Effect": "Allow",
        "Principal": {
          "Service": "elasticmapreduce.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
      }
    ]
  }
  
  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  
  profile_iam_role_emr_policy(d).json
  
  
  {
    "Version": "2012-10-17",
    "Statement": [{
        "Effect": "Allow",
        "Resource": "*",
        "Action": [
            "cloudwatch:*",
            "dynamodb:*",
            "ec2:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSteps",
            "kinesis:CreateStream",
            "kinesis:DeleteStream",
            "kinesis:DescribeStream",
            "kinesis:GetRecords",
            "kinesis:GetShardIterator",
            "kinesis:MergeShards",
            "kinesis:PutRecord",
            "kinesis:SplitShard",
            "rds:Describe*",
            "s3:*",
            "sdb:*",
            "sns:*",
            "sqs:*"
        ]
    }]
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

profile_iam_role_emr(c).json

{
    "Version": "2008-10-17",
    "Statement": [
      {
        "Sid": "",
        "Effect": "Allow",
        "Principal": {
          "Service": "ec2.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
      }
    ]
  }
  
  
  ++++++++++++++++++++++++++++++++++++++++++++++++++
  
  terraform {
  required_version = ">= 1.3.4"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 4.56.0"
    }
  }
}
#provider described
provider "aws" {
  profile = var.aws_profile
  region  = var.aws_region
}


